{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\mern\\\\cab-booking-app\\\\client\\\\src\\\\pages\\\\BookCab.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Map from \"../components/Map\";\nimport { indianCities } from \"../data/indian-cities\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BookCab = () => {\n  _s();\n  const [pickup, setPickup] = useState(null);\n  const [destination, setDestination] = useState(null);\n  const [pickupAddress, setPickupAddress] = useState(\"\");\n  const [destinationAddress, setDestinationAddress] = useState(\"\");\n  const [pickupSuggestions, setPickupSuggestions] = useState([]);\n  const [destinationSuggestions, setDestinationSuggestions] = useState([]);\n  const [cabOptions, setCabOptions] = useState([]);\n  const [selectedCab, setSelectedCab] = useState(null);\n  const [fare, setFare] = useState(null);\n  const [distance, setDistance] = useState(null);\n  const [duration, setDuration] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [showMap, setShowMap] = useState(false);\n  const [locationEntered, setLocationEntered] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Fetch cab options when component mounts\n    const fetchCabOptions = async () => {\n      try {\n        // For demo purposes, we'll create some sample cab options\n        const sampleCabs = [{\n          id: \"1\",\n          name: \"Economy\",\n          description: \"Affordable rides for everyday use\",\n          capacity: 4,\n          baseFare: 50,\n          perKmRate: 12,\n          perMinuteRate: 2,\n          image: \"/placeholder.svg\"\n        }, {\n          id: \"2\",\n          name: \"Premium\",\n          description: \"Comfortable rides with extra space\",\n          capacity: 4,\n          baseFare: 80,\n          perKmRate: 15,\n          perMinuteRate: 3,\n          image: \"/placeholder.svg\"\n        }, {\n          id: \"3\",\n          name: \"SUV\",\n          description: \"Spacious vehicles for groups\",\n          capacity: 6,\n          baseFare: 100,\n          perKmRate: 18,\n          perMinuteRate: 4,\n          image: \"/placeholder.svg\"\n        }];\n        setCabOptions(sampleCabs);\n      } catch (err) {\n        console.error(\"Error fetching cab options:\", err);\n        setError(\"Failed to load cab options\");\n      }\n    };\n    fetchCabOptions();\n  }, []);\n\n  // Handle input change for pickup location\n  const handlePickupChange = e => {\n    const value = e.target.value;\n    setPickupAddress(value);\n    if (value.length > 1) {\n      // Filter cities that match the input\n      const filteredCities = indianCities.filter(city => city.name.toLowerCase().includes(value.toLowerCase()) || city.state.toLowerCase().includes(value.toLowerCase())).slice(0, 5); // Limit to 5 suggestions\n\n      setPickupSuggestions(filteredCities);\n    } else {\n      setPickupSuggestions([]);\n    }\n  };\n\n  // Handle input change for destination\n  const handleDestinationChange = e => {\n    const value = e.target.value;\n    setDestinationAddress(value);\n    if (value.length > 1) {\n      // Filter cities that match the input\n      const filteredCities = indianCities.filter(city => city.name.toLowerCase().includes(value.toLowerCase()) || city.state.toLowerCase().includes(value.toLowerCase())).slice(0, 5); // Limit to 5 suggestions\n\n      setDestinationSuggestions(filteredCities);\n    } else {\n      setDestinationSuggestions([]);\n    }\n  };\n\n  // Handle selection of a city from suggestions\n  const handleSelectCity = (city, type) => {\n    if (type === \"pickup\") {\n      setPickupAddress(`${city.name}, ${city.state}`);\n      setPickup({\n        lat: city.lat,\n        lng: city.lng\n      });\n      setPickupSuggestions([]);\n    } else {\n      setDestinationAddress(`${city.name}, ${city.state}`);\n      setDestination({\n        lat: city.lat,\n        lng: city.lng\n      });\n      setDestinationSuggestions([]);\n    }\n  };\n  const handleLocationSelect = (type, location) => {\n    if (type === \"pickup\") {\n      setPickup(location);\n      // Find the closest city to the selected location\n      const closestCity = findClosestCity(location);\n      if (closestCity) {\n        setPickupAddress(`${closestCity.name}, ${closestCity.state}`);\n      }\n    } else if (type === \"destination\") {\n      setDestination(location);\n      // Find the closest city to the selected location\n      const closestCity = findClosestCity(location);\n      if (closestCity) {\n        setDestinationAddress(`${closestCity.name}, ${closestCity.state}`);\n      }\n    }\n  };\n\n  // Find the closest city to a given location\n  const findClosestCity = location => {\n    let closestCity = null;\n    let minDistance = Number.POSITIVE_INFINITY;\n    indianCities.forEach(city => {\n      const distance = calculateHaversineDistance(location.lat, location.lng, city.lat, city.lng);\n      if (distance < minDistance) {\n        minDistance = distance;\n        closestCity = city;\n      }\n    });\n    return closestCity;\n  };\n\n  // Function to calculate distance between two coordinates using Haversine formula\n  const calculateHaversineDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 6371; // Radius of the Earth in km\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLon = (lon2 - lon1) * Math.PI / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c; // Distance in km\n    return distance;\n  };\n  const handleFindCabs = () => {\n    // Simple validation\n    if (!pickup || !destination) {\n      setError(\"Please select both pickup and destination cities\");\n      return;\n    }\n    setLocationEntered(true);\n    calculateFareWithCoordinates(pickup, destination);\n  };\n  const calculateFareWithCoordinates = (pickupCoords, destCoords) => {\n    // Calculate actual distance using Haversine formula\n    const distanceInKm = calculateHaversineDistance(pickupCoords.lat, pickupCoords.lng, destCoords.lat, destCoords.lng);\n\n    // Round to 2 decimal places\n    const finalDistance = Math.round(distanceInKm * 100) / 100;\n\n    // Calculate duration (roughly 1.5 minutes per km for long distances)\n    const durationInMinutes = Math.ceil(finalDistance * 1.5);\n    setDistance(finalDistance);\n    setDuration(durationInMinutes);\n\n    // Calculate fare for each cab type\n    const updatedCabOptions = cabOptions.map(cab => {\n      // Base fare + per km rate + per minute rate\n      // For long distances, we'll apply a discount factor\n      const distanceFactor = finalDistance > 100 ? 0.8 : 1; // 20% discount for long trips\n      const calculatedFare = cab.baseFare + finalDistance * cab.perKmRate * distanceFactor + durationInMinutes * cab.perMinuteRate;\n      return {\n        ...cab,\n        calculatedFare: Math.ceil(calculatedFare) // Round up to nearest rupee\n      };\n    });\n    setCabOptions(updatedCabOptions);\n\n    // If a cab is already selected, update its fare\n    if (selectedCab) {\n      const selectedCabUpdated = updatedCabOptions.find(cab => cab.id === selectedCab.id);\n      if (selectedCabUpdated) {\n        setSelectedCab(selectedCabUpdated);\n        setFare(selectedCabUpdated.calculatedFare);\n      }\n    }\n  };\n  const handleCabSelect = cab => {\n    setSelectedCab(cab);\n    setFare(cab.calculatedFare);\n  };\n  const handleBooking = async () => {\n    if (!pickup || !destination || !selectedCab) {\n      setError(\"Please select pickup, destination and cab type\");\n      return;\n    }\n    try {\n      setLoading(true);\n\n      // In a real app, you would send this data to your API\n      const bookingData = {\n        pickup: {\n          coordinates: pickup,\n          address: pickupAddress\n        },\n        destination: {\n          coordinates: destination,\n          address: destinationAddress\n        },\n        cabType: selectedCab.id,\n        fare: fare,\n        distance: distance,\n        duration: duration\n      };\n      console.log(\"Booking data:\", bookingData);\n\n      // Simulate API call\n      setTimeout(() => {\n        // Generate a random booking ID\n        const bookingId = Math.floor(Math.random() * 1000000);\n        // Store booking data in sessionStorage so it can be accessed on the ride details page\n        sessionStorage.setItem(\"currentBooking\", JSON.stringify(bookingData));\n        navigate(`/ride/${bookingId}`);\n      }, 1500);\n    } catch (err) {\n      console.error(\"Error booking cab:\", err);\n      setError(\"Failed to book cab. Please try again.\");\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"book-cab-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"form-title\",\n      children: \"Book a Cab\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"location-inputs\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"pickup-input\",\n          children: \"Pickup City\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"autocomplete-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"pickup-input\",\n            type: \"text\",\n            className: \"form-control\",\n            placeholder: \"Enter pickup city\",\n            value: pickupAddress,\n            onChange: handlePickupChange,\n            autoComplete: \"off\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 13\n          }, this), pickupSuggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"suggestions-list\",\n            children: pickupSuggestions.map((city, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              onClick: () => handleSelectCity(city, \"pickup\"),\n              children: [city.name, \", \", city.state]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"destination-input\",\n          children: \"Destination City\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"autocomplete-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"destination-input\",\n            type: \"text\",\n            className: \"form-control\",\n            placeholder: \"Enter destination city\",\n            value: destinationAddress,\n            onChange: handleDestinationChange,\n            autoComplete: \"off\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this), destinationSuggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"suggestions-list\",\n            children: destinationSuggestions.map((city, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              onClick: () => handleSelectCity(city, \"destination\"),\n              children: [city.name, \", \", city.state]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: handleFindCabs,\n          disabled: !pickup || !destination,\n          children: \"Find Cabs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary\",\n          onClick: () => setShowMap(!showMap),\n          children: showMap ? \"Hide Map\" : \"Show Map (Optional)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this), showMap && /*#__PURE__*/_jsxDEV(Map, {\n      pickup: pickup,\n      destination: destination,\n      onLocationSelect: handleLocationSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 19\n    }, this), locationEntered && distance && duration && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"trip-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Distance: \", distance.toFixed(2), \" km\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Estimated Time: \", duration, \" minutes\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 9\n    }, this), locationEntered && cabOptions.length > 0 && distance && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Cab Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cab-options\",\n        children: cabOptions.map(cab => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `cab-option ${selectedCab && selectedCab.id === cab.id ? \"selected\" : \"\"}`,\n          onClick: () => handleCabSelect(cab),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cab-option-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"cab-option-name\",\n              children: cab.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"cab-option-price\",\n              children: [\"\\u20B9\", cab.calculatedFare]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cab-option-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: cab.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Capacity: \", cab.capacity, \" persons\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 17\n          }, this)]\n        }, cab.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), selectedCab && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"booking-summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Booking Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Cab Type: \", selectedCab.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Pickup: \", pickupAddress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Destination: \", destinationAddress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Distance: \", distance.toFixed(2), \" km\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Estimated Time: \", duration, \" minutes\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Fare: \\u20B9\", fare]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary btn-block\",\n        onClick: handleBooking,\n        disabled: loading,\n        children: loading ? \"Processing...\" : \"Book Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 5\n  }, this);\n};\n_s(BookCab, \"RADJ1zdLWKhHL02M6PcwNOF4kF8=\", false, function () {\n  return [useNavigate];\n});\n_c = BookCab;\nexport default BookCab;\nvar _c;\n$RefreshReg$(_c, \"BookCab\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useEffect","useNavigate","Map","indianCities","jsxDEV","_jsxDEV","Fragment","_Fragment","BookCab","pickup","setPickup","destination","setDestination","pickupAddress","setPickupAddress","destinationAddress","setDestinationAddress","pickupSuggestions","setPickupSuggestions","destinationSuggestions","setDestinationSuggestions","cabOptions","setCabOptions","selectedCab","setSelectedCab","fare","setFare","distance","setDistance","duration","setDuration","loading","setLoading","error","setError","showMap","setShowMap","locationEntered","setLocationEntered","navigate","fetchCabOptions","sampleCabs","id","name","description","capacity","baseFare","perKmRate","perMinuteRate","image","err","console","handlePickupChange","e","value","target","length","filteredCities","filter","city","toLowerCase","includes","state","slice","handleDestinationChange","handleSelectCity","type","lat","lng","handleLocationSelect","location","closestCity","findClosestCity","minDistance","Number","POSITIVE_INFINITY","forEach","calculateHaversineDistance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","handleFindCabs","calculateFareWithCoordinates","pickupCoords","destCoords","distanceInKm","finalDistance","round","durationInMinutes","ceil","updatedCabOptions","map","cab","distanceFactor","calculatedFare","selectedCabUpdated","find","handleCabSelect","handleBooking","bookingData","coordinates","address","cabType","log","setTimeout","bookingId","floor","random","sessionStorage","setItem","JSON","stringify","className","children","fileName","lineNumber","columnNumber","htmlFor","placeholder","onChange","autoComplete","index","onClick","disabled","onLocationSelect","toFixed","_c","$RefreshReg$"],"sources":["D:/mern/cab-booking-app/client/src/pages/BookCab.js"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { useNavigate } from \"react-router-dom\"\nimport Map from \"../components/Map\"\nimport { indianCities } from \"../data/indian-cities\"\n\nconst BookCab = () => {\n  const [pickup, setPickup] = useState(null)\n  const [destination, setDestination] = useState(null)\n  const [pickupAddress, setPickupAddress] = useState(\"\")\n  const [destinationAddress, setDestinationAddress] = useState(\"\")\n  const [pickupSuggestions, setPickupSuggestions] = useState([])\n  const [destinationSuggestions, setDestinationSuggestions] = useState([])\n  const [cabOptions, setCabOptions] = useState([])\n  const [selectedCab, setSelectedCab] = useState(null)\n  const [fare, setFare] = useState(null)\n  const [distance, setDistance] = useState(null)\n  const [duration, setDuration] = useState(null)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(\"\")\n  const [showMap, setShowMap] = useState(false)\n  const [locationEntered, setLocationEntered] = useState(false)\n\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    // Fetch cab options when component mounts\n    const fetchCabOptions = async () => {\n      try {\n        // For demo purposes, we'll create some sample cab options\n        const sampleCabs = [\n          {\n            id: \"1\",\n            name: \"Economy\",\n            description: \"Affordable rides for everyday use\",\n            capacity: 4,\n            baseFare: 50,\n            perKmRate: 12,\n            perMinuteRate: 2,\n            image: \"/placeholder.svg\",\n          },\n          {\n            id: \"2\",\n            name: \"Premium\",\n            description: \"Comfortable rides with extra space\",\n            capacity: 4,\n            baseFare: 80,\n            perKmRate: 15,\n            perMinuteRate: 3,\n            image: \"/placeholder.svg\",\n          },\n          {\n            id: \"3\",\n            name: \"SUV\",\n            description: \"Spacious vehicles for groups\",\n            capacity: 6,\n            baseFare: 100,\n            perKmRate: 18,\n            perMinuteRate: 4,\n            image: \"/placeholder.svg\",\n          },\n        ]\n        setCabOptions(sampleCabs)\n      } catch (err) {\n        console.error(\"Error fetching cab options:\", err)\n        setError(\"Failed to load cab options\")\n      }\n    }\n\n    fetchCabOptions()\n  }, [])\n\n  // Handle input change for pickup location\n  const handlePickupChange = (e) => {\n    const value = e.target.value\n    setPickupAddress(value)\n\n    if (value.length > 1) {\n      // Filter cities that match the input\n      const filteredCities = indianCities\n        .filter(\n          (city) =>\n            city.name.toLowerCase().includes(value.toLowerCase()) ||\n            city.state.toLowerCase().includes(value.toLowerCase()),\n        )\n        .slice(0, 5) // Limit to 5 suggestions\n\n      setPickupSuggestions(filteredCities)\n    } else {\n      setPickupSuggestions([])\n    }\n  }\n\n  // Handle input change for destination\n  const handleDestinationChange = (e) => {\n    const value = e.target.value\n    setDestinationAddress(value)\n\n    if (value.length > 1) {\n      // Filter cities that match the input\n      const filteredCities = indianCities\n        .filter(\n          (city) =>\n            city.name.toLowerCase().includes(value.toLowerCase()) ||\n            city.state.toLowerCase().includes(value.toLowerCase()),\n        )\n        .slice(0, 5) // Limit to 5 suggestions\n\n      setDestinationSuggestions(filteredCities)\n    } else {\n      setDestinationSuggestions([])\n    }\n  }\n\n  // Handle selection of a city from suggestions\n  const handleSelectCity = (city, type) => {\n    if (type === \"pickup\") {\n      setPickupAddress(`${city.name}, ${city.state}`)\n      setPickup({\n        lat: city.lat,\n        lng: city.lng,\n      })\n      setPickupSuggestions([])\n    } else {\n      setDestinationAddress(`${city.name}, ${city.state}`)\n      setDestination({\n        lat: city.lat,\n        lng: city.lng,\n      })\n      setDestinationSuggestions([])\n    }\n  }\n\n  const handleLocationSelect = (type, location) => {\n    if (type === \"pickup\") {\n      setPickup(location)\n      // Find the closest city to the selected location\n      const closestCity = findClosestCity(location)\n      if (closestCity) {\n        setPickupAddress(`${closestCity.name}, ${closestCity.state}`)\n      }\n    } else if (type === \"destination\") {\n      setDestination(location)\n      // Find the closest city to the selected location\n      const closestCity = findClosestCity(location)\n      if (closestCity) {\n        setDestinationAddress(`${closestCity.name}, ${closestCity.state}`)\n      }\n    }\n  }\n\n  // Find the closest city to a given location\n  const findClosestCity = (location) => {\n    let closestCity = null\n    let minDistance = Number.POSITIVE_INFINITY\n\n    indianCities.forEach((city) => {\n      const distance = calculateHaversineDistance(location.lat, location.lng, city.lat, city.lng)\n\n      if (distance < minDistance) {\n        minDistance = distance\n        closestCity = city\n      }\n    })\n\n    return closestCity\n  }\n\n  // Function to calculate distance between two coordinates using Haversine formula\n  const calculateHaversineDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 6371 // Radius of the Earth in km\n    const dLat = ((lat2 - lat1) * Math.PI) / 180\n    const dLon = ((lon2 - lon1) * Math.PI) / 180\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos((lat1 * Math.PI) / 180) * Math.cos((lat2 * Math.PI) / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2)\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n    const distance = R * c // Distance in km\n    return distance\n  }\n\n  const handleFindCabs = () => {\n    // Simple validation\n    if (!pickup || !destination) {\n      setError(\"Please select both pickup and destination cities\")\n      return\n    }\n\n    setLocationEntered(true)\n    calculateFareWithCoordinates(pickup, destination)\n  }\n\n  const calculateFareWithCoordinates = (pickupCoords, destCoords) => {\n    // Calculate actual distance using Haversine formula\n    const distanceInKm = calculateHaversineDistance(pickupCoords.lat, pickupCoords.lng, destCoords.lat, destCoords.lng)\n\n    // Round to 2 decimal places\n    const finalDistance = Math.round(distanceInKm * 100) / 100\n\n    // Calculate duration (roughly 1.5 minutes per km for long distances)\n    const durationInMinutes = Math.ceil(finalDistance * 1.5)\n\n    setDistance(finalDistance)\n    setDuration(durationInMinutes)\n\n    // Calculate fare for each cab type\n    const updatedCabOptions = cabOptions.map((cab) => {\n      // Base fare + per km rate + per minute rate\n      // For long distances, we'll apply a discount factor\n      const distanceFactor = finalDistance > 100 ? 0.8 : 1 // 20% discount for long trips\n      const calculatedFare =\n        cab.baseFare + finalDistance * cab.perKmRate * distanceFactor + durationInMinutes * cab.perMinuteRate\n      return {\n        ...cab,\n        calculatedFare: Math.ceil(calculatedFare), // Round up to nearest rupee\n      }\n    })\n\n    setCabOptions(updatedCabOptions)\n\n    // If a cab is already selected, update its fare\n    if (selectedCab) {\n      const selectedCabUpdated = updatedCabOptions.find((cab) => cab.id === selectedCab.id)\n      if (selectedCabUpdated) {\n        setSelectedCab(selectedCabUpdated)\n        setFare(selectedCabUpdated.calculatedFare)\n      }\n    }\n  }\n\n  const handleCabSelect = (cab) => {\n    setSelectedCab(cab)\n    setFare(cab.calculatedFare)\n  }\n\n  const handleBooking = async () => {\n    if (!pickup || !destination || !selectedCab) {\n      setError(\"Please select pickup, destination and cab type\")\n      return\n    }\n\n    try {\n      setLoading(true)\n\n      // In a real app, you would send this data to your API\n      const bookingData = {\n        pickup: {\n          coordinates: pickup,\n          address: pickupAddress,\n        },\n        destination: {\n          coordinates: destination,\n          address: destinationAddress,\n        },\n        cabType: selectedCab.id,\n        fare: fare,\n        distance: distance,\n        duration: duration,\n      }\n\n      console.log(\"Booking data:\", bookingData)\n\n      // Simulate API call\n      setTimeout(() => {\n        // Generate a random booking ID\n        const bookingId = Math.floor(Math.random() * 1000000)\n        // Store booking data in sessionStorage so it can be accessed on the ride details page\n        sessionStorage.setItem(\"currentBooking\", JSON.stringify(bookingData))\n        navigate(`/ride/${bookingId}`)\n      }, 1500)\n    } catch (err) {\n      console.error(\"Error booking cab:\", err)\n      setError(\"Failed to book cab. Please try again.\")\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"book-cab-container\">\n      <h2 className=\"form-title\">Book a Cab</h2>\n\n      {error && <div className=\"alert alert-danger\">{error}</div>}\n\n      <div className=\"location-inputs\">\n        <div className=\"form-group\">\n          <label htmlFor=\"pickup-input\">Pickup City</label>\n          <div className=\"autocomplete-container\">\n            <input\n              id=\"pickup-input\"\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"Enter pickup city\"\n              value={pickupAddress}\n              onChange={handlePickupChange}\n              autoComplete=\"off\"\n            />\n            {pickupSuggestions.length > 0 && (\n              <ul className=\"suggestions-list\">\n                {pickupSuggestions.map((city, index) => (\n                  <li key={index} onClick={() => handleSelectCity(city, \"pickup\")}>\n                    {city.name}, {city.state}\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"destination-input\">Destination City</label>\n          <div className=\"autocomplete-container\">\n            <input\n              id=\"destination-input\"\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"Enter destination city\"\n              value={destinationAddress}\n              onChange={handleDestinationChange}\n              autoComplete=\"off\"\n            />\n            {destinationSuggestions.length > 0 && (\n              <ul className=\"suggestions-list\">\n                {destinationSuggestions.map((city, index) => (\n                  <li key={index} onClick={() => handleSelectCity(city, \"destination\")}>\n                    {city.name}, {city.state}\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        </div>\n\n        <div className=\"form-actions\">\n          <button className=\"btn btn-primary\" onClick={handleFindCabs} disabled={!pickup || !destination}>\n            Find Cabs\n          </button>\n\n          <button className=\"btn btn-secondary\" onClick={() => setShowMap(!showMap)}>\n            {showMap ? \"Hide Map\" : \"Show Map (Optional)\"}\n          </button>\n        </div>\n      </div>\n\n      {showMap && <Map pickup={pickup} destination={destination} onLocationSelect={handleLocationSelect} />}\n\n      {locationEntered && distance && duration && (\n        <div className=\"trip-info\">\n          <p>Distance: {distance.toFixed(2)} km</p>\n          <p>Estimated Time: {duration} minutes</p>\n        </div>\n      )}\n\n      {locationEntered && cabOptions.length > 0 && distance && (\n        <>\n          <h3>Select Cab Type</h3>\n          <div className=\"cab-options\">\n            {cabOptions.map((cab) => (\n              <div\n                key={cab.id}\n                className={`cab-option ${selectedCab && selectedCab.id === cab.id ? \"selected\" : \"\"}`}\n                onClick={() => handleCabSelect(cab)}\n              >\n                <div className=\"cab-option-header\">\n                  <span className=\"cab-option-name\">{cab.name}</span>\n                  <span className=\"cab-option-price\">₹{cab.calculatedFare}</span>\n                </div>\n                <div className=\"cab-option-details\">\n                  <p>{cab.description}</p>\n                  <p>Capacity: {cab.capacity} persons</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n\n      {selectedCab && (\n        <div className=\"booking-summary\">\n          <h3>Booking Summary</h3>\n          <p>Cab Type: {selectedCab.name}</p>\n          <p>Pickup: {pickupAddress}</p>\n          <p>Destination: {destinationAddress}</p>\n          <p>Distance: {distance.toFixed(2)} km</p>\n          <p>Estimated Time: {duration} minutes</p>\n          <p>Fare: ₹{fare}</p>\n\n          <button className=\"btn btn-primary btn-block\" onClick={handleBooking} disabled={loading}>\n            {loading ? \"Processing...\" : \"Book Now\"}\n          </button>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default BookCab\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}