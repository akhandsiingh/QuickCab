{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\mern\\\\cab-booking-app\\\\client\\\\src\\\\context\\\\AuthContext.js\";\nimport { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nexport const AuthContext = createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [userType, setUserType] = useState(null); // 'user', 'driver', or 'admin'\n\n  useEffect(() => {\n    // Check if user is logged in\n    const checkLoggedIn = async () => {\n      try {\n        const token = localStorage.getItem(\"token\");\n        const type = localStorage.getItem(\"userType\");\n        if (token) {\n          // Set auth token header\n          axios.defaults.headers.common[\"x-auth-token\"] = token;\n\n          // For demo purposes, we'll use localStorage to get user data\n          try {\n            if (type === \"driver\") {\n              // Get driver data from localStorage\n              const drivers = JSON.parse(localStorage.getItem(\"drivers\") || \"[]\");\n              const driverEmail = localStorage.getItem(\"userEmail\");\n              const driver = drivers.find(d => d.email === driverEmail);\n              if (driver) {\n                setUser(driver);\n                setUserType(\"driver\");\n              }\n            } else if (type === \"admin\") {\n              // Get admin data from localStorage\n              const users = JSON.parse(localStorage.getItem(\"users\") || \"[]\");\n              const adminEmail = localStorage.getItem(\"userEmail\");\n              const admin = users.find(u => u.email === adminEmail && u.role === \"admin\");\n              if (admin) {\n                setUser(admin);\n                setUserType(\"admin\");\n              }\n            } else {\n              // Get user data from localStorage\n              const users = JSON.parse(localStorage.getItem(\"users\") || \"[]\");\n              const userEmail = localStorage.getItem(\"userEmail\");\n              const regularUser = users.find(u => u.email === userEmail && u.role !== \"admin\");\n              if (regularUser) {\n                setUser(regularUser);\n                setUserType(\"user\");\n              }\n            }\n          } catch (err) {\n            console.error(\"Error getting user data from localStorage:\", err);\n          }\n        }\n      } catch (err) {\n        // If token is invalid, remove it\n        localStorage.removeItem(\"token\");\n        localStorage.removeItem(\"userType\");\n        localStorage.removeItem(\"userEmail\");\n        delete axios.defaults.headers.common[\"x-auth-token\"];\n      }\n      setLoading(false);\n    };\n    checkLoggedIn();\n  }, []);\n  const login = async (email, password, type = \"user\") => {\n    try {\n      // For demo purposes, we'll use localStorage to authenticate\n      let userData = null;\n      if (type === \"driver\") {\n        // Check driver credentials\n        const drivers = JSON.parse(localStorage.getItem(\"drivers\") || \"[]\");\n        userData = drivers.find(driver => driver.email === email && driver.password === password);\n        if (!userData) {\n          return {\n            success: false,\n            error: \"Invalid driver credentials\"\n          };\n        }\n        setUserType(\"driver\");\n      } else if (type === \"admin\") {\n        // Check admin credentials\n        const users = JSON.parse(localStorage.getItem(\"users\") || \"[]\");\n        userData = users.find(user => user.email === email && user.password === password && user.role === \"admin\");\n        if (!userData) {\n          return {\n            success: false,\n            error: \"Invalid admin credentials\"\n          };\n        }\n        setUserType(\"admin\");\n      } else {\n        // Check user credentials\n        const users = JSON.parse(localStorage.getItem(\"users\") || \"[]\");\n        userData = users.find(user => user.email === email && user.password === password && user.role !== \"admin\");\n        if (!userData) {\n          return {\n            success: false,\n            error: \"Invalid credentials\"\n          };\n        }\n        setUserType(\"user\");\n      }\n\n      // Generate a fake token\n      const token = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n\n      // Save token and user data\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"userType\", type);\n      localStorage.setItem(\"userEmail\", email);\n      axios.defaults.headers.common[\"x-auth-token\"] = token;\n      setUser(userData);\n      return {\n        success: true\n      };\n    } catch (err) {\n      return {\n        success: false,\n        error: err.message || \"Login failed\"\n      };\n    }\n  };\n  const register = async (name, email, password, phone, type = \"user\", additionalData = {}) => {\n    try {\n      // For demo purposes, we'll use localStorage to register\n      if (type === \"driver\") {\n        // Register driver\n        const drivers = JSON.parse(localStorage.getItem(\"drivers\") || \"[]\");\n\n        // Check if driver already exists\n        if (drivers.some(driver => driver.email === email)) {\n          return {\n            success: false,\n            error: \"Driver with this email already exists\"\n          };\n        }\n\n        // Create new driver\n        const newDriver = {\n          id: `driver-${drivers.length + 1}`,\n          name,\n          email,\n          password,\n          // In a real app, this would be hashed\n          phone,\n          licenseNumber: additionalData.licenseNumber || \"\",\n          vehicleModel: additionalData.vehicleModel || \"\",\n          vehicleNumber: additionalData.vehicleNumber || \"\",\n          status: \"active\",\n          isAvailable: true,\n          rating: 0,\n          rides: 0,\n          joinedAt: new Date().toISOString()\n        };\n        drivers.push(newDriver);\n        localStorage.setItem(\"drivers\", JSON.stringify(drivers));\n        setUser(newDriver);\n        setUserType(\"driver\");\n      } else {\n        // Register user\n        const users = JSON.parse(localStorage.getItem(\"users\") || \"[]\");\n\n        // Check if user already exists\n        if (users.some(user => user.email === email)) {\n          return {\n            success: false,\n            error: \"User with this email already exists\"\n          };\n        }\n\n        // Create new user\n        const newUser = {\n          id: `user-${users.length + 1}`,\n          name,\n          email,\n          password,\n          // In a real app, this would be hashed\n          phone,\n          role: type === \"admin\" ? \"admin\" : \"user\",\n          joinedAt: new Date().toISOString()\n        };\n        users.push(newUser);\n        localStorage.setItem(\"users\", JSON.stringify(users));\n        setUser(newUser);\n        setUserType(type);\n      }\n\n      // Generate a fake token\n      const token = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n\n      // Save token and user data\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"userType\", type);\n      localStorage.setItem(\"userEmail\", email);\n      axios.defaults.headers.common[\"x-auth-token\"] = token;\n      return {\n        success: true\n      };\n    } catch (err) {\n      return {\n        success: false,\n        error: err.message || \"Registration failed\"\n      };\n    }\n  };\n  const updateDriverStatus = async isAvailable => {\n    try {\n      if (userType !== \"driver\") {\n        return {\n          success: false,\n          error: \"Not authorized\"\n        };\n      }\n\n      // For demo purposes, we'll update in localStorage\n      const drivers = JSON.parse(localStorage.getItem(\"drivers\") || \"[]\");\n      const driverIndex = drivers.findIndex(driver => driver.email === user.email);\n      if (driverIndex !== -1) {\n        drivers[driverIndex].isAvailable = isAvailable;\n        localStorage.setItem(\"drivers\", JSON.stringify(drivers));\n\n        // Update user state with new status\n        setUser({\n          ...user,\n          isAvailable\n        });\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false,\n        error: \"Driver not found\"\n      };\n    } catch (err) {\n      return {\n        success: false,\n        error: err.message || \"Failed to update status\"\n      };\n    }\n  };\n  const logout = () => {\n    // Remove token from storage and state\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"userType\");\n    localStorage.removeItem(\"userEmail\");\n    delete axios.defaults.headers.common[\"x-auth-token\"];\n    setUser(null);\n    setUserType(null);\n  };\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      userType,\n      login,\n      register,\n      logout,\n      updateDriverStatus\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"names":["_jsxFileName","createContext","useState","useEffect","axios","AuthContext","AuthProvider","children","user","setUser","loading","setLoading","userType","setUserType","checkLoggedIn","token","localStorage","getItem","type","defaults","headers","common","drivers","JSON","parse","driverEmail","driver","find","d","email","users","adminEmail","admin","u","role","userEmail","regularUser","err","console","error","removeItem","login","password","userData","success","Math","random","toString","substring","setItem","message","register","name","phone","additionalData","some","newDriver","id","length","licenseNumber","vehicleModel","vehicleNumber","status","isAvailable","rating","rides","joinedAt","Date","toISOString","push","stringify","newUser","updateDriverStatus","driverIndex","findIndex","logout","React","createElement","Provider","value","__self","__source","fileName","lineNumber","columnNumber"],"sources":["D:/mern/cab-booking-app/client/src/context/AuthContext.js"],"sourcesContent":["\"use client\"\n\nimport { createContext, useState, useEffect } from \"react\"\nimport axios from \"axios\"\n\nexport const AuthContext = createContext()\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null)\n  const [loading, setLoading] = useState(true)\n  const [userType, setUserType] = useState(null) // 'user', 'driver', or 'admin'\n\n  useEffect(() => {\n    // Check if user is logged in\n    const checkLoggedIn = async () => {\n      try {\n        const token = localStorage.getItem(\"token\")\n        const type = localStorage.getItem(\"userType\")\n\n        if (token) {\n          // Set auth token header\n          axios.defaults.headers.common[\"x-auth-token\"] = token\n\n          // For demo purposes, we'll use localStorage to get user data\n          try {\n            if (type === \"driver\") {\n              // Get driver data from localStorage\n              const drivers = JSON.parse(localStorage.getItem(\"drivers\") || \"[]\")\n              const driverEmail = localStorage.getItem(\"userEmail\")\n              const driver = drivers.find((d) => d.email === driverEmail)\n\n              if (driver) {\n                setUser(driver)\n                setUserType(\"driver\")\n              }\n            } else if (type === \"admin\") {\n              // Get admin data from localStorage\n              const users = JSON.parse(localStorage.getItem(\"users\") || \"[]\")\n              const adminEmail = localStorage.getItem(\"userEmail\")\n              const admin = users.find((u) => u.email === adminEmail && u.role === \"admin\")\n\n              if (admin) {\n                setUser(admin)\n                setUserType(\"admin\")\n              }\n            } else {\n              // Get user data from localStorage\n              const users = JSON.parse(localStorage.getItem(\"users\") || \"[]\")\n              const userEmail = localStorage.getItem(\"userEmail\")\n              const regularUser = users.find((u) => u.email === userEmail && u.role !== \"admin\")\n\n              if (regularUser) {\n                setUser(regularUser)\n                setUserType(\"user\")\n              }\n            }\n          } catch (err) {\n            console.error(\"Error getting user data from localStorage:\", err)\n          }\n        }\n      } catch (err) {\n        // If token is invalid, remove it\n        localStorage.removeItem(\"token\")\n        localStorage.removeItem(\"userType\")\n        localStorage.removeItem(\"userEmail\")\n        delete axios.defaults.headers.common[\"x-auth-token\"]\n      }\n\n      setLoading(false)\n    }\n\n    checkLoggedIn()\n  }, [])\n\n  const login = async (email, password, type = \"user\") => {\n    try {\n      // For demo purposes, we'll use localStorage to authenticate\n      let userData = null\n\n      if (type === \"driver\") {\n        // Check driver credentials\n        const drivers = JSON.parse(localStorage.getItem(\"drivers\") || \"[]\")\n        userData = drivers.find((driver) => driver.email === email && driver.password === password)\n\n        if (!userData) {\n          return { success: false, error: \"Invalid driver credentials\" }\n        }\n\n        setUserType(\"driver\")\n      } else if (type === \"admin\") {\n        // Check admin credentials\n        const users = JSON.parse(localStorage.getItem(\"users\") || \"[]\")\n        userData = users.find((user) => user.email === email && user.password === password && user.role === \"admin\")\n\n        if (!userData) {\n          return { success: false, error: \"Invalid admin credentials\" }\n        }\n\n        setUserType(\"admin\")\n      } else {\n        // Check user credentials\n        const users = JSON.parse(localStorage.getItem(\"users\") || \"[]\")\n        userData = users.find((user) => user.email === email && user.password === password && user.role !== \"admin\")\n\n        if (!userData) {\n          return { success: false, error: \"Invalid credentials\" }\n        }\n\n        setUserType(\"user\")\n      }\n\n      // Generate a fake token\n      const token = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n\n      // Save token and user data\n      localStorage.setItem(\"token\", token)\n      localStorage.setItem(\"userType\", type)\n      localStorage.setItem(\"userEmail\", email)\n      axios.defaults.headers.common[\"x-auth-token\"] = token\n\n      setUser(userData)\n\n      return { success: true }\n    } catch (err) {\n      return {\n        success: false,\n        error: err.message || \"Login failed\",\n      }\n    }\n  }\n\n  const register = async (name, email, password, phone, type = \"user\", additionalData = {}) => {\n    try {\n      // For demo purposes, we'll use localStorage to register\n      if (type === \"driver\") {\n        // Register driver\n        const drivers = JSON.parse(localStorage.getItem(\"drivers\") || \"[]\")\n\n        // Check if driver already exists\n        if (drivers.some((driver) => driver.email === email)) {\n          return { success: false, error: \"Driver with this email already exists\" }\n        }\n\n        // Create new driver\n        const newDriver = {\n          id: `driver-${drivers.length + 1}`,\n          name,\n          email,\n          password, // In a real app, this would be hashed\n          phone,\n          licenseNumber: additionalData.licenseNumber || \"\",\n          vehicleModel: additionalData.vehicleModel || \"\",\n          vehicleNumber: additionalData.vehicleNumber || \"\",\n          status: \"active\",\n          isAvailable: true,\n          rating: 0,\n          rides: 0,\n          joinedAt: new Date().toISOString(),\n        }\n\n        drivers.push(newDriver)\n        localStorage.setItem(\"drivers\", JSON.stringify(drivers))\n\n        setUser(newDriver)\n        setUserType(\"driver\")\n      } else {\n        // Register user\n        const users = JSON.parse(localStorage.getItem(\"users\") || \"[]\")\n\n        // Check if user already exists\n        if (users.some((user) => user.email === email)) {\n          return { success: false, error: \"User with this email already exists\" }\n        }\n\n        // Create new user\n        const newUser = {\n          id: `user-${users.length + 1}`,\n          name,\n          email,\n          password, // In a real app, this would be hashed\n          phone,\n          role: type === \"admin\" ? \"admin\" : \"user\",\n          joinedAt: new Date().toISOString(),\n        }\n\n        users.push(newUser)\n        localStorage.setItem(\"users\", JSON.stringify(users))\n\n        setUser(newUser)\n        setUserType(type)\n      }\n\n      // Generate a fake token\n      const token = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n\n      // Save token and user data\n      localStorage.setItem(\"token\", token)\n      localStorage.setItem(\"userType\", type)\n      localStorage.setItem(\"userEmail\", email)\n      axios.defaults.headers.common[\"x-auth-token\"] = token\n\n      return { success: true }\n    } catch (err) {\n      return {\n        success: false,\n        error: err.message || \"Registration failed\",\n      }\n    }\n  }\n\n  const updateDriverStatus = async (isAvailable) => {\n    try {\n      if (userType !== \"driver\") {\n        return { success: false, error: \"Not authorized\" }\n      }\n\n      // For demo purposes, we'll update in localStorage\n      const drivers = JSON.parse(localStorage.getItem(\"drivers\") || \"[]\")\n      const driverIndex = drivers.findIndex((driver) => driver.email === user.email)\n\n      if (driverIndex !== -1) {\n        drivers[driverIndex].isAvailable = isAvailable\n        localStorage.setItem(\"drivers\", JSON.stringify(drivers))\n\n        // Update user state with new status\n        setUser({ ...user, isAvailable })\n\n        return { success: true }\n      }\n\n      return { success: false, error: \"Driver not found\" }\n    } catch (err) {\n      return {\n        success: false,\n        error: err.message || \"Failed to update status\",\n      }\n    }\n  }\n\n  const logout = () => {\n    // Remove token from storage and state\n    localStorage.removeItem(\"token\")\n    localStorage.removeItem(\"userType\")\n    localStorage.removeItem(\"userEmail\")\n    delete axios.defaults.headers.common[\"x-auth-token\"]\n    setUser(null)\n    setUserType(null)\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        loading,\n        userType,\n        login,\n        register,\n        logout,\n        updateDriverStatus,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}