{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\mern\\\\cab-booking-app\\\\client\\\\src\\\\components\\\\Map.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = ({\n  pickup,\n  destination,\n  onLocationSelect\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n  const markersRef = useRef([]);\n  const routeRef = useRef(null);\n  useEffect(() => {\n    if (!mapInstanceRef.current) {\n      initMap();\n    }\n  }, []);\n  useEffect(() => {\n    if (mapInstanceRef.current) {\n      // Clear existing markers\n      markersRef.current.forEach(marker => marker.remove());\n      markersRef.current = [];\n\n      // Add markers for pickup and destination if they exist\n      if (pickup) {\n        addMarker(pickup, \"Pickup Location\", \"green\");\n      }\n      if (destination) {\n        addMarker(destination, \"Destination\", \"red\");\n      }\n\n      // Draw route if both points exist\n      if (pickup && destination) {\n        drawRoute(pickup, destination);\n      }\n    }\n  }, [pickup, destination]);\n  const initMap = () => {\n    const defaultLocation = [20.5937, 78.9629]; // Center of India\n\n    mapInstanceRef.current = L.map(mapRef.current).setView(defaultLocation, 12);\n    L.tileLayer(\"https://api.maptiler.com/maps/streets-v2/{z}/{x}/{y}.png?key=uY3F88mWlOJKH9sntYdw\", {\n      attribution: \"&copy; MapTiler & OpenStreetMap contributors\"\n    }).addTo(mapInstanceRef.current);\n\n    // Add click listener to select pickup or destination\n    mapInstanceRef.current.on(\"click\", e => {\n      if (onLocationSelect) {\n        if (!pickup) {\n          onLocationSelect(\"pickup\", {\n            lat: e.latlng.lat,\n            lng: e.latlng.lng\n          });\n        } else if (!destination) {\n          onLocationSelect(\"destination\", {\n            lat: e.latlng.lat,\n            lng: e.latlng.lng\n          });\n        }\n      }\n    });\n\n    // Try to get user location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const userLocation = [position.coords.latitude, position.coords.longitude];\n        mapInstanceRef.current.setView(userLocation, 14);\n        addMarker({\n          lat: userLocation[0],\n          lng: userLocation[1]\n        }, \"Your Location\", \"blue\");\n      }, () => console.log(\"Geolocation failed.\"));\n    }\n  };\n  const addMarker = (location, title, color) => {\n    const icon = L.icon({\n      iconUrl: `https://maptiler.com/img/markers/${color}-marker.png`,\n      iconSize: [25, 41],\n      iconAnchor: [12, 41]\n    });\n    const marker = L.marker([location.lat, location.lng], {\n      icon\n    }).addTo(mapInstanceRef.current).bindPopup(title);\n    markersRef.current.push(marker);\n  };\n  const drawRoute = (origin, destination) => {\n    if (routeRef.current) {\n      mapInstanceRef.current.removeLayer(routeRef.current);\n    }\n    fetch(`https://api.maptiler.com/routing/directions/driving/${origin.lng},${origin.lat};${destination.lng},${destination.lat}?key=uY3F88mWlOJKH9sntYdw&geometries=geojson`).then(response => response.json()).then(data => {\n      if (data.routes && data.routes.length > 0) {\n        const routeCoords = data.routes[0].geometry.coordinates.map(coord => [coord[1], coord[0]]);\n        routeRef.current = L.polyline(routeCoords, {\n          color: \"blue\",\n          weight: 5\n        }).addTo(mapInstanceRef.current);\n      }\n    }).catch(error => console.error(\"Error fetching route:\", error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    className: \"map-container\",\n    style: {\n      height: \"400px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 10\n  }, this);\n};\n_s(Map, \"hskz1kplM1L3S9HzPkhGM1xcqpA=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useEffect","useRef","L","jsxDEV","_jsxDEV","Map","pickup","destination","onLocationSelect","mapRef","mapInstanceRef","markersRef","routeRef","current","initMap","forEach","marker","remove","addMarker","drawRoute","defaultLocation","map","setView","tileLayer","attribution","addTo","on","e","lat","latlng","lng","navigator","geolocation","getCurrentPosition","position","userLocation","coords","latitude","longitude","console","log","location","title","color","icon","iconUrl","iconSize","iconAnchor","bindPopup","push","origin","removeLayer","fetch","then","response","json","data","routes","length","routeCoords","geometry","coordinates","coord","polyline","weight","catch","error","ref","className","style","height","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/mern/cab-booking-app/client/src/components/Map.js"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst Map = ({ pickup, destination, onLocationSelect }) => {\n  const mapRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n  const markersRef = useRef([]);\n  const routeRef = useRef(null);\n\n  useEffect(() => {\n    if (!mapInstanceRef.current) {\n      initMap();\n    }\n  }, []);\n\n  useEffect(() => {\n    if (mapInstanceRef.current) {\n      // Clear existing markers\n      markersRef.current.forEach(marker => marker.remove());\n      markersRef.current = [];\n\n      // Add markers for pickup and destination if they exist\n      if (pickup) {\n        addMarker(pickup, \"Pickup Location\", \"green\");\n      }\n      if (destination) {\n        addMarker(destination, \"Destination\", \"red\");\n      }\n\n      // Draw route if both points exist\n      if (pickup && destination) {\n        drawRoute(pickup, destination);\n      }\n    }\n  }, [pickup, destination]);\n\n  const initMap = () => {\n    const defaultLocation = [20.5937, 78.9629]; // Center of India\n    \n    mapInstanceRef.current = L.map(mapRef.current).setView(defaultLocation, 12);\n    \n    L.tileLayer(\n      \"https://api.maptiler.com/maps/streets-v2/{z}/{x}/{y}.png?key=uY3F88mWlOJKH9sntYdw\",\n      {\n        attribution: \"&copy; MapTiler & OpenStreetMap contributors\",\n      }\n    ).addTo(mapInstanceRef.current);\n\n    // Add click listener to select pickup or destination\n    mapInstanceRef.current.on(\"click\", (e) => {\n      if (onLocationSelect) {\n        if (!pickup) {\n          onLocationSelect(\"pickup\", { lat: e.latlng.lat, lng: e.latlng.lng });\n        } else if (!destination) {\n          onLocationSelect(\"destination\", { lat: e.latlng.lat, lng: e.latlng.lng });\n        }\n      }\n    });\n\n    // Try to get user location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const userLocation = [position.coords.latitude, position.coords.longitude];\n          mapInstanceRef.current.setView(userLocation, 14);\n          addMarker({ lat: userLocation[0], lng: userLocation[1] }, \"Your Location\", \"blue\");\n        },\n        () => console.log(\"Geolocation failed.\"),\n      );\n    }\n  };\n\n  const addMarker = (location, title, color) => {\n    const icon = L.icon({\n      iconUrl: `https://maptiler.com/img/markers/${color}-marker.png`,\n      iconSize: [25, 41],\n      iconAnchor: [12, 41],\n    });\n    \n    const marker = L.marker([location.lat, location.lng], { icon }).addTo(mapInstanceRef.current).bindPopup(title);\n    markersRef.current.push(marker);\n  };\n\n  const drawRoute = (origin, destination) => {\n    if (routeRef.current) {\n      mapInstanceRef.current.removeLayer(routeRef.current);\n    }\n    \n    fetch(\n      `https://api.maptiler.com/routing/directions/driving/${origin.lng},${origin.lat};${destination.lng},${destination.lat}?key=uY3F88mWlOJKH9sntYdw&geometries=geojson`\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.routes && data.routes.length > 0) {\n          const routeCoords = data.routes[0].geometry.coordinates.map(coord => [coord[1], coord[0]]);\n          routeRef.current = L.polyline(routeCoords, { color: \"blue\", weight: 5 }).addTo(mapInstanceRef.current);\n        }\n      })\n      .catch(error => console.error(\"Error fetching route:\", error));\n  };\n\n  return <div ref={mapRef} className=\"map-container\" style={{ height: \"400px\" }}></div>;\n};\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}