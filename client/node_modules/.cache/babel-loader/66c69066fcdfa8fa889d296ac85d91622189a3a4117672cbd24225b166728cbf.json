{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\mern\\\\cab-booking-app\\\\client\\\\src\\\\components\\\\Map.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = ({\n  pickup,\n  destination,\n  onLocationSelect,\n  driverLocation\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n  const markersRef = useRef([]);\n  const routeRef = useRef(null);\n  const [mapLoaded, setMapLoaded] = useState(false);\n  const [pickupSelected, setPickupSelected] = useState(!!pickup);\n  useEffect(() => {\n    // Initialize the map using OpenStreetMap with Leaflet\n    initMap();\n    return () => {\n      // Clean up\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (mapInstanceRef.current && mapLoaded) {\n      // Clear existing markers\n      markersRef.current.forEach(marker => {\n        if (marker && marker.remove) {\n          marker.remove();\n        }\n      });\n      markersRef.current = [];\n\n      // Clear existing route\n      if (routeRef.current) {\n        routeRef.current.remove();\n        routeRef.current = null;\n      }\n\n      // Add markers for pickup and destination if they exist\n      if (pickup && pickup.lat && pickup.lng) {\n        addMarker(pickup, \"Pickup Location\", \"green\");\n        setPickupSelected(true);\n      }\n      if (destination && destination.lat && destination.lng) {\n        addMarker(destination, \"Destination\", \"red\");\n      }\n\n      // Add driver location marker if available\n      if (driverLocation && driverLocation.lat && driverLocation.lng) {\n        addDriverMarker(driverLocation);\n      }\n\n      // If both points exist, draw a route between them\n      if (pickup && pickup.lat && pickup.lng && destination && destination.lat && destination.lng) {\n        drawRoute(pickup, destination);\n      }\n    }\n  }, [pickup, destination, driverLocation, mapLoaded]);\n  const initMap = () => {\n    // Check if Leaflet is available\n    if (!window.L) {\n      // Load Leaflet CSS\n      const linkElement = document.createElement(\"link\");\n      linkElement.rel = \"stylesheet\";\n      linkElement.href = \"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\";\n      document.head.appendChild(linkElement);\n\n      // Load Leaflet JS\n      const script = document.createElement(\"script\");\n      script.src = \"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\";\n      script.async = true;\n      script.onload = createMap;\n      document.head.appendChild(script);\n    } else {\n      createMap();\n    }\n  };\n  const createMap = () => {\n    if (!window.L || !mapRef.current) return;\n\n    // Default to center of India if no location is provided\n    const defaultLocation = {\n      lat: 20.5937,\n      lng: 78.9629\n    };\n\n    // Create map\n    const map = window.L.map(mapRef.current).setView([defaultLocation.lat, defaultLocation.lng], 5);\n\n    // Add OpenStreetMap tiles\n    window.L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(map);\n    mapInstanceRef.current = map;\n    setMapLoaded(true);\n\n    // Try to get user's current location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const userLocation = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        map.setView([userLocation.lat, userLocation.lng], 12);\n\n        // If onLocationSelect is provided, call it with the user's location\n        if (onLocationSelect && !pickup) {\n          onLocationSelect(\"pickup\", userLocation);\n        }\n      }, () => {\n        console.log(\"Error: The Geolocation service failed.\");\n      });\n    }\n\n    // Add click listener to map\n    map.on(\"click\", e => {\n      if (onLocationSelect) {\n        // Determine if we're setting pickup or destination based on what's already selected\n        if (!pickupSelected) {\n          onLocationSelect(\"pickup\", {\n            lat: e.latlng.lat,\n            lng: e.latlng.lng\n          });\n          setPickupSelected(true);\n        } else {\n          onLocationSelect(\"destination\", {\n            lat: e.latlng.lat,\n            lng: e.latlng.lng\n          });\n        }\n      }\n    });\n  };\n  const addMarker = (position, title, color) => {\n    if (!window.L || !mapInstanceRef.current) return;\n\n    // Create a custom icon\n    const icon = window.L.divIcon({\n      className: \"custom-marker\",\n      html: `<div style=\"background-color: ${color}; width: 20px; height: 20px; border-radius: 50%; border: 2px solid white; box-shadow: 0 2px 5px rgba(0,0,0,0.2);\"></div>`,\n      iconSize: [20, 20],\n      iconAnchor: [10, 10]\n    });\n\n    // Add marker\n    const marker = window.L.marker([position.lat, position.lng], {\n      icon\n    }).addTo(mapInstanceRef.current);\n    marker.bindPopup(title);\n    markersRef.current.push(marker);\n\n    // Center map on the marker\n    mapInstanceRef.current.setView([position.lat, position.lng], 12);\n  };\n  const addDriverMarker = position => {\n    if (!window.L || !mapInstanceRef.current) return;\n\n    // Create a car icon\n    const icon = window.L.divIcon({\n      className: \"driver-marker\",\n      html: `<div style=\"background-color: #4a6cf7; color: white; width: 30px; height: 30px; border-radius: 50%; display: flex; align-items: center; justify-content: center; border: 2px solid white; box-shadow: 0 2px 5px rgba(0,0,0,0.2);\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <path d=\"M19 17h2c.6 0 1-.4 1-1v-3c0-.9-.7-1.7-1.5-1.9C18.7 10.6 16 10 16 10s-1.3-1.4-2.2-2.3c-.5-.4-1.1-.7-1.8-.7H5c-.6 0-1.1.4-1.4.9l-1.5 2.8C1.4 11.3 1 12.1 1 13v3c0 .6.4 1 1 1h2\"></path>\n                  <circle cx=\"7\" cy=\"17\" r=\"2\"></circle>\n                  <path d=\"M9 17h6\"></path>\n                  <circle cx=\"17\" cy=\"17\" r=\"2\"></circle>\n                </svg>\n              </div>`,\n      iconSize: [30, 30],\n      iconAnchor: [15, 15]\n    });\n\n    // Add marker\n    const marker = window.L.marker([position.lat, position.lng], {\n      icon\n    }).addTo(mapInstanceRef.current);\n    marker.bindPopup(\"Driver Location\");\n    markersRef.current.push(marker);\n  };\n  const drawRoute = (origin, destination) => {\n    if (!window.L || !mapInstanceRef.current) return;\n\n    // For a simple demo, we'll just draw a straight line\n    // In a real app, you would use a routing service like OSRM or GraphHopper\n    const points = [[origin.lat, origin.lng], [destination.lat, destination.lng]];\n    const line = window.L.polyline(points, {\n      color: \"#4a6cf7\",\n      weight: 4,\n      opacity: 0.7,\n      dashArray: \"10, 10\"\n    }).addTo(mapInstanceRef.current);\n    routeRef.current = line;\n\n    // Fit the map to show the route\n    mapInstanceRef.current.fitBounds(line.getBounds(), {\n      padding: [50, 50]\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    className: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 10\n  }, this);\n};\n_s(Map, \"txOckP5aIyT3iya6n4WbqJyIOyA=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useEffect","useRef","useState","jsxDEV","_jsxDEV","Map","pickup","destination","onLocationSelect","driverLocation","mapRef","mapInstanceRef","markersRef","routeRef","mapLoaded","setMapLoaded","pickupSelected","setPickupSelected","initMap","current","remove","forEach","marker","lat","lng","addMarker","addDriverMarker","drawRoute","window","L","linkElement","document","createElement","rel","href","head","appendChild","script","src","async","onload","createMap","defaultLocation","map","setView","tileLayer","attribution","addTo","navigator","geolocation","getCurrentPosition","position","userLocation","coords","latitude","longitude","console","log","on","e","latlng","title","color","icon","divIcon","className","html","iconSize","iconAnchor","bindPopup","push","origin","points","line","polyline","weight","opacity","dashArray","fitBounds","getBounds","padding","ref","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/mern/cab-booking-app/client/src/components/Map.js"],"sourcesContent":["\"use client\"\n\nimport { useEffect, useRef, useState } from \"react\"\n\nconst Map = ({ pickup, destination, onLocationSelect, driverLocation }) => {\n  const mapRef = useRef(null)\n  const mapInstanceRef = useRef(null)\n  const markersRef = useRef([])\n  const routeRef = useRef(null)\n  const [mapLoaded, setMapLoaded] = useState(false)\n  const [pickupSelected, setPickupSelected] = useState(!!pickup)\n\n  useEffect(() => {\n    // Initialize the map using OpenStreetMap with Leaflet\n    initMap()\n\n    return () => {\n      // Clean up\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove()\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    if (mapInstanceRef.current && mapLoaded) {\n      // Clear existing markers\n      markersRef.current.forEach((marker) => {\n        if (marker && marker.remove) {\n          marker.remove()\n        }\n      })\n      markersRef.current = []\n\n      // Clear existing route\n      if (routeRef.current) {\n        routeRef.current.remove()\n        routeRef.current = null\n      }\n\n      // Add markers for pickup and destination if they exist\n      if (pickup && pickup.lat && pickup.lng) {\n        addMarker(pickup, \"Pickup Location\", \"green\")\n        setPickupSelected(true)\n      }\n\n      if (destination && destination.lat && destination.lng) {\n        addMarker(destination, \"Destination\", \"red\")\n      }\n\n      // Add driver location marker if available\n      if (driverLocation && driverLocation.lat && driverLocation.lng) {\n        addDriverMarker(driverLocation)\n      }\n\n      // If both points exist, draw a route between them\n      if (pickup && pickup.lat && pickup.lng && destination && destination.lat && destination.lng) {\n        drawRoute(pickup, destination)\n      }\n    }\n  }, [pickup, destination, driverLocation, mapLoaded])\n\n  const initMap = () => {\n    // Check if Leaflet is available\n    if (!window.L) {\n      // Load Leaflet CSS\n      const linkElement = document.createElement(\"link\")\n      linkElement.rel = \"stylesheet\"\n      linkElement.href = \"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\"\n      document.head.appendChild(linkElement)\n\n      // Load Leaflet JS\n      const script = document.createElement(\"script\")\n      script.src = \"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"\n      script.async = true\n      script.onload = createMap\n      document.head.appendChild(script)\n    } else {\n      createMap()\n    }\n  }\n\n  const createMap = () => {\n    if (!window.L || !mapRef.current) return\n\n    // Default to center of India if no location is provided\n    const defaultLocation = { lat: 20.5937, lng: 78.9629 }\n\n    // Create map\n    const map = window.L.map(mapRef.current).setView([defaultLocation.lat, defaultLocation.lng], 5)\n\n    // Add OpenStreetMap tiles\n    window.L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(map)\n\n    mapInstanceRef.current = map\n    setMapLoaded(true)\n\n    // Try to get user's current location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const userLocation = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n          }\n          map.setView([userLocation.lat, userLocation.lng], 12)\n\n          // If onLocationSelect is provided, call it with the user's location\n          if (onLocationSelect && !pickup) {\n            onLocationSelect(\"pickup\", userLocation)\n          }\n        },\n        () => {\n          console.log(\"Error: The Geolocation service failed.\")\n        },\n      )\n    }\n\n    // Add click listener to map\n    map.on(\"click\", (e) => {\n      if (onLocationSelect) {\n        // Determine if we're setting pickup or destination based on what's already selected\n        if (!pickupSelected) {\n          onLocationSelect(\"pickup\", { lat: e.latlng.lat, lng: e.latlng.lng })\n          setPickupSelected(true)\n        } else {\n          onLocationSelect(\"destination\", { lat: e.latlng.lat, lng: e.latlng.lng })\n        }\n      }\n    })\n  }\n\n  const addMarker = (position, title, color) => {\n    if (!window.L || !mapInstanceRef.current) return\n\n    // Create a custom icon\n    const icon = window.L.divIcon({\n      className: \"custom-marker\",\n      html: `<div style=\"background-color: ${color}; width: 20px; height: 20px; border-radius: 50%; border: 2px solid white; box-shadow: 0 2px 5px rgba(0,0,0,0.2);\"></div>`,\n      iconSize: [20, 20],\n      iconAnchor: [10, 10],\n    })\n\n    // Add marker\n    const marker = window.L.marker([position.lat, position.lng], { icon }).addTo(mapInstanceRef.current)\n    marker.bindPopup(title)\n    markersRef.current.push(marker)\n\n    // Center map on the marker\n    mapInstanceRef.current.setView([position.lat, position.lng], 12)\n  }\n\n  const addDriverMarker = (position) => {\n    if (!window.L || !mapInstanceRef.current) return\n\n    // Create a car icon\n    const icon = window.L.divIcon({\n      className: \"driver-marker\",\n      html: `<div style=\"background-color: #4a6cf7; color: white; width: 30px; height: 30px; border-radius: 50%; display: flex; align-items: center; justify-content: center; border: 2px solid white; box-shadow: 0 2px 5px rgba(0,0,0,0.2);\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <path d=\"M19 17h2c.6 0 1-.4 1-1v-3c0-.9-.7-1.7-1.5-1.9C18.7 10.6 16 10 16 10s-1.3-1.4-2.2-2.3c-.5-.4-1.1-.7-1.8-.7H5c-.6 0-1.1.4-1.4.9l-1.5 2.8C1.4 11.3 1 12.1 1 13v3c0 .6.4 1 1 1h2\"></path>\n                  <circle cx=\"7\" cy=\"17\" r=\"2\"></circle>\n                  <path d=\"M9 17h6\"></path>\n                  <circle cx=\"17\" cy=\"17\" r=\"2\"></circle>\n                </svg>\n              </div>`,\n      iconSize: [30, 30],\n      iconAnchor: [15, 15],\n    })\n\n    // Add marker\n    const marker = window.L.marker([position.lat, position.lng], { icon }).addTo(mapInstanceRef.current)\n    marker.bindPopup(\"Driver Location\")\n    markersRef.current.push(marker)\n  }\n\n  const drawRoute = (origin, destination) => {\n    if (!window.L || !mapInstanceRef.current) return\n\n    // For a simple demo, we'll just draw a straight line\n    // In a real app, you would use a routing service like OSRM or GraphHopper\n    const points = [\n      [origin.lat, origin.lng],\n      [destination.lat, destination.lng],\n    ]\n\n    const line = window.L.polyline(points, {\n      color: \"#4a6cf7\",\n      weight: 4,\n      opacity: 0.7,\n      dashArray: \"10, 10\",\n    }).addTo(mapInstanceRef.current)\n\n    routeRef.current = line\n\n    // Fit the map to show the route\n    mapInstanceRef.current.fitBounds(line.getBounds(), {\n      padding: [50, 50],\n    })\n  }\n\n  return <div ref={mapRef} className=\"map-container\"></div>\n}\n\nexport default Map\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}